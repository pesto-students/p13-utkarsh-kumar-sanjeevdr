
const properties = new Map();

const scoreDiv = document.getElementById("score");

function updateScore() {

    let porpertyValues = {

        scope: {
            scope_U:1.0,
            scope_C:1.08,
        },
        base_Confidentiality:[[0.00,0.22,0.56],[0.00,0.65,0.75],[0.00,0.85,0.95]],
        base_Integrity:[[0.00,0.22,0.56],[0.55,0.60,0.75],[0.85,0.90,0.95]],
        base_Availability:[[0.00,0.22,0.56],[0.55,0.60,0.65],[0.85,0.90,0.95]],
        AV:{
            AV_N:0.85,
            AV_A:0.62,
            AV_L:0.55,
            AV_P:0.20
        },
        AC:{
            AC_L:0.77,
            AC_H:0.44
        },
        PR:{
            PR_N:0.85,
            PR_L:0.62,
            PR_H:0.27
        },
        UI:{
            UI_N:0.85,
            UI_R:0.62
        }
    }

    let scopeStatus = porpertyValues.scope[properties.get("scope")];

    let sensivity = properties.get("sens");
    let confidentiality = properties.get("conf");
    let baseConfidentiality = 0;
    if(sensivity==="sens_N" && confidentiality==="conf_N"){
        baseConfidentiality=porpertyValues.base_Confidentiality[0][0];
    }else if(sensivity==="sens_N" && confidentiality==="conf_L"){
        baseConfidentiality=porpertyValues.base_Confidentiality[0][1];
    }else if(sensivity==="sens_N" && confidentiality==="conf_H"){
        baseConfidentiality=porpertyValues.base_Confidentiality[0][2];
    }else if(sensivity==="sens_L" && confidentiality==="conf_N"){
        baseConfidentiality=porpertyValues.base_Confidentiality[1][0];
    }else if(sensivity==="sens_L" && confidentiality==="conf_L"){
        baseConfidentiality=porpertyValues.base_Confidentiality[1][1];
    }else if(sensivity==="sens_L" && confidentiality==="conf_H"){
        baseConfidentiality=porpertyValues.base_Confidentiality[1][2];
    }else if(sensivity==="sens_H" && confidentiality==="conf_N"){
        baseConfidentiality=porpertyValues.base_Confidentiality[2][0];
    }else if(sensivity==="sens_H" && confidentiality==="conf_L"){
        baseConfidentiality=porpertyValues.base_Confidentiality[2][1];
    }else{
        baseConfidentiality=porpertyValues.base_Confidentiality[2][2];
    }


    let healthImpact = properties.get("health");
    let integrity = properties.get("integ");
    let baseIntegrity = 0;
    if(healthImpact==="health_N" && integrity==="integ_N"){
        baseIntegrity=porpertyValues.base_Integrity[0][0];
    }else if(healthImpact==="health_N" && integrity==="integ_L"){
        baseIntegrity=porpertyValues.base_Integrity[0][1];
    }else if(healthImpact==="health_N" && integrity==="integ_H"){
        baseIntegrity=porpertyValues.base_Integrity[0][2];
    }else if(healthImpact==="health_L" && integrity==="integ_N"){
        baseIntegrity=porpertyValues.base_Integrity[1][0];
    }else if(healthImpact==="health_L" && integrity==="integ_L"){
        baseIntegrity=porpertyValues.base_Integrity[1][1];
    }else if(healthImpact==="health_L" && integrity==="integ_H"){
        baseIntegrity=porpertyValues.base_Integrity[1][2];
    }else if(healthImpact==="health_H" && integrity==="integ_N"){
        baseIntegrity=porpertyValues.base_Integrity[2][0];
    }else if(healthImpact==="health_H" && integrity==="integ_L"){
        baseIntegrity=porpertyValues.base_Integrity[2][1];
    }else{
        baseIntegrity=porpertyValues.base_Integrity[2][2];
    }
    
    // let healthImpact = properties.get(health);
    let availability = properties.get("integ");
    let baseAvailability = 0;
    if(healthImpact==="health_N" && availability==="avail_N"){
        baseAvailability=porpertyValues.base_Availability[0][0];
    }else if(healthImpact==="health_N" && availability==="avail_L"){
        baseAvailability=porpertyValues.base_Availability[0][1];
    }else if(healthImpact==="health_N" && availability==="avail_H"){
        baseAvailability=porpertyValues.base_Availability[0][2];
    }else if(healthImpact==="health_L" && availability==="avail_N"){
        baseAvailability=porpertyValues.base_Availability[1][0];
    }else if(healthImpact==="health_L" && availability==="avail_L"){
        baseAvailability=porpertyValues.base_Availability[1][1];
    }else if(healthImpact==="health_L" && availability==="avail_H"){
        baseAvailability=porpertyValues.base_Availability[1][2];
    }else if(healthImpact==="health_H" && availability==="avail_N"){
        baseAvailability=porpertyValues.base_Availability[2][0];
    }else if(healthImpact==="health_H" && availability==="avail_L"){
        baseAvailability=porpertyValues.base_Availability[2][1];
    }else{
        baseAvailability=porpertyValues.base_Availability[2][2];
    }

    let scoreBase = baseConfidentiality+baseIntegrity+baseAvailability;

    let attackVector = porpertyValues.AV[properties.get("AV")];
    let attackComplexity = porpertyValues.AC[properties.get("AC")];
    let privilegeRequired = porpertyValues.PR[properties.get("PR")];
    let userInteraction = porpertyValues.UI[properties.get("UI")];

    let scoreExploitability = attackVector*attackComplexity*privilegeRequired*userInteraction;

    let scoreFinal =0;
    if(scoreBase===0){
        scoreFinal=0;
    }
    else{
        scoreFinal=scopeStatus*((3.326258289*scoreBase)+(1.1*scoreExploitability));
    }

    scoreDiv.innerText=scoreFinal;
	
}

const containerDiv = document.getElementById("container");

const warningDiv = document.getElementById("warning");

containerDiv.addEventListener("click", (event) => {
    
    let name = event.target.name;
    let id = event.target.id;

    properties.set(name,id);

    if(properties.size===10){
        warningDiv.style.display = "none";
        updateScore();
    }
   
    // alert("You Clicked the Button with Id : "+properties);
    console.log(properties)
  
})